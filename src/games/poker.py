# -*- coding: utf-8 -*-
"""poker

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DyBH712VTIhKhCOX3qkaI5uwWoVbzCRj
"""

from src.core.casino import player, admin
from src.ui.ui import player as ui

import random

class poker:
    def __init__(self):
        self.player = player()
        self.admin = admin()
        self.uid = uid
        self.difficulty = difficulty

        run = True

        while run:
            userInput = input("Would you like to play (y/n): ")

            if userInput == 'y':
                play = self.admin.checkIfEnough(self.uid, 100) #check if player has enought to bet
                if play == True:
                    money = self.playGame()
                    self.admin.addGame('slots', self.uid, 100, money)
                    print(f"You earned: {money}, your balance is now {self.player.getWinnings(self.uid)}")
                else:
                    print("You do not have enough to play")
            else:
                run = False
        ui(self.uid)

    def playGame(self):
      playerbet = 100
      playerinput = ''
      values = ['2','3','4','5','6','7','8','9','10','Jack','Queen','King','Ace']
      suites = ['Hearts', 'Clubs', 'Diamonds', 'Spades']
      playerscores = [0,0,0,0,0,0,0,0,0,0,0,0,0]
      dealerscores = [0,0,0,0,0,0,0,0,0,0,0,0,0]
      playerpoints = 0
      dealerpoints = 0

      playercard1 = [ random.randint(0, 12) , random.randint(0,3) ]
      playercard2 = [ random.randint(0, 12) , random.randint(0,3) ] 

      dealercard1 = [ random.randint(0, 12) , random.randint(0,3) ]
      dealercard2 = [ random.randint(0, 12) , random.randint(0,3) ] 

      print('You have a ' + values[playercard1[0]] + ' of ' + suites[playercard1[1]])
      print('and a ' + values[playercard2[0]] + ' of ' + suites[playercard2[1]])

      tablecard1 = [ random.randint(0, 12) , random.randint(0,3) ] 
      tablecard2 = [ random.randint(0, 12) , random.randint(0,3) ]
      tablecard3 = [ random.randint(0, 12) , random.randint(0,3) ]
      tablecard4 = [ random.randint(0, 12) , random.randint(0,3) ]
      tablecard5 = [ random.randint(0, 12) , random.randint(0,3) ]

      #adding up the cards that the player or dealer have which have the same value
      for x in range(0,len(values)):
        if (values[playercard1[0]] == values[x]): 
            playerscores[x] += 1 
        if (values[playercard2[0]] == values[x]): 
            playerscores[x] += 1 

        if (values[dealercard1[0]] == values[x]): 
            dealerscores[x] += 1 
        if (values[dealercard2[0]] == values[x]): 
            dealerscores[x] += 1 
      
        if (values[tablecard1[0]] == values[x]): 
            playerscores[x] += 1 
            dealerscores[x] += 1 
        if (values[tablecard2[0]] == values[x]): 
            playerscores[x] += 1 
            dealerscores[x] += 1 
        if (values[tablecard3[0]] == values[x]): 
            playerscores[x] += 1
            dealerscores[x] += 1  
        if (values[tablecard4[0]] == values[x]): 
            playerscores[x] += 1 
            dealerscores[x] += 1 
        if (values[tablecard5[0]] == values[x]): 
            playerscores[x] += 1
            dealerscores[x] += 1  
            
      playercardsuits = [playercard1[1],playercard2[1],tablecard1[1],tablecard2[1],tablecard3[1],tablecard4[1],tablecard5[1]]
      dealercardsuits = [dealercard1[1],dealercard2[1],tablecard1[1],tablecard2[1],tablecard3[1],tablecard4[1],tablecard5[1]]
 

      #this lists out how many of each value card the player and dealer have
      print(playerscores)
      print(dealerscores)

      play = 1
      playerinput = input('Add aditional bet number or f to fold')
      if (playerinput != 'f'):
        playerbet += int(playerinput)
        print('The first table card is a ' + values[tablecard1[0]] + ' of ' + suites[tablecard1[1]])
        playerinput = input('Add aditional bet number or f to fold')
        if (playerinput != 'f' and play == 1):
          playerbet += int(playerinput)
          print('The second table card is a ' + values[tablecard2[0]] + ' of ' + suites[tablecard2[1]])
          playerinput = input('Add aditional bet number or f to fold')
          if (playerinput != 'f' and play == 1):
            playerbet += int(playerinput)
            print('The third table card is a ' + values[tablecard3[0]] + ' of ' + suites[tablecard3[1]])
            playerinput = input('Add aditional bet number or f to fold')
            if (playerinput != 'f' and play == 1):
              playerbet += int(playerinput)
              print('The fourth table card is a ' + values[tablecard4[0]] + ' of ' + suites[tablecard4[1]])
              playerinput = input('Add aditional bet number or f to fold')
              if (playerinput != 'f' and play == 1):
                playerbet += int(playerinput)
                print('The fifth table card is a ' + values[tablecard5[0]] + ' of ' + suites[tablecard5[1]])
                playerinput = input('Add aditional bet number or f to fold')
              else: 
                play = 0
            else: 
                play = 0
          else: 
                play = 0
        else: 
                play = 0
      else: 
                play = 0

      if (play == 1) :
        print()
        print("The dealers cards are:")
        print('A ' + values[dealercard1[0]] + ' of ' + suites[dealercard1[1]])
        print('A ' + values[dealercard2[0]] + ' of ' + suites[dealercard2[1]])

      kind = 4 
      #This loop is to find out who has the highest number of the same type of card
      while (kind > 1): #kind starts at 4 of a kind
        for x in range(len(values)-1,0,-1): #starts from ace because they are worth the most
          if (playerscores[x] == kind and dealerscores[x] != kind):
            print('The player has ' + str(kind) + ' ' +  values[x] + '\'s which is more than the dealer does!')
            playerpoints += 150
            continue
          if (dealerscores[x] == kind and playerscores[x] != kind):
            print('The dealer has ' + str(kind) + ' ' +  values[x] + '\'s which is more than the player does!')
            playerpoints -= 150
            break
        kind -= 1

      #checking for full house
      for i in range(len(playerscores)) :
        if (playerscores[i] == 3):
           for f in range(len(playerscores))  :
              if (playerscores[f] == 2):
                print("Player has a full house")
                playerpoints += 160
                break
        if (dealerscores[i] == 3):
           for f in range(len(playerscores))  :
              if (dealerscores[f] == 2):
                print("Dealer has a full house")
                playerpoints -= 160
                break

      #for each card that applies points to player check for straight
      seq = 0
      seqn = 0
      
      for i in range(0,9) :
          if (playerscores[i] > 0) :
            j = 1
            while (j < 5) :
                  if (playerscores[i + j] > 0) :
                    j = j + 1
                    if j == 5 : 
                      seq = 1
                  else :
                    j = 6 
          if (dealerscores[i] > 0) :
            j = 1
            while (j < 5) :
                  if (dealerscores[i + j] > 0) :
                    j = j + 1
                    if j == 5 : 
                      seqn = 1
                  else :
                    j = 6 
      if (seq == 1) :
          print("Player has a straight")
          playerpoints += 125
      if (seqn == 1) :
          print("Dealer has a straight")
          playerpoints -= 125
      

      #checking for flush
      for i in range(0,4) :
          flushcount = 0
          dflushcount = 0
          for j in range(0,7) :
            if i == playercardsuits[j] :
              flushcount += 1
            if flushcount > 4:
              print("Player has a flush")
              playerpoints += 150
              break
            if i == dealercardsuits[j] :
              dflushcount += 1
            if dflushcount > 4:
              print("Dealer has a flush")
              playerpoints -= 150
              break
      
      if (playerpoints > 0 and play == 1) :
        print("Player wins")
        return 2 * playerbet
      else :
        print("but the Player loses")
        return -playerbet

if __name__ == '__main__':
    poker()